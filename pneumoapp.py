# -*- coding: utf-8 -*-
"""pneumoApp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pxfRzGeptyC8WZG8TlxEhM2Zdgc31ZB4

**Import drive where Dataset is**
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Imports**"""

import keras
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator

"""**Setting up paths**"""

test_path = '/content/drive/My Drive/xrays/chest_xray/test'
train_path = '/content/drive/My Drive/xrays/chest_xray/train'

"""**Creating layers**"""

# 2d array black and white pictures
cnn_class = Sequential(name = 'PneumoniAI')

cnn_class.add(Convolution2D(32, 3, 3, padding='same', input_shape=(64, 64, 1), activation='relu', name = 'Conv_First'))
cnn_class.add(Convolution2D(32, 3, 3, padding='same', name = 'Conv_Second'))

cnn_class.add(MaxPooling2D(pool_size=(2, 2), padding='same', name = 'First_Pooling'))

cnn_class.add(Convolution2D(64, 3, 3, padding='same', name = 'Conv_Third'))
cnn_class.add(Convolution2D(64, 3, 3, padding='same', name = 'Conv_Fourth'))

cnn_class.add(MaxPooling2D(pool_size=(2, 2), padding='same', name = 'Second_Pooling'))

cnn_class.add(Flatten(name = 'Flatten_Layer'))

#Hidden layer - full conected layer 

cnn_class.add(Dense(512, activation = 'relu', name = 'FullC_Layer'))


#Output layer - is pneumonia or not

cnn_classClass.add(Dense(1, activation = 'sigmoid',  name= 'OutputL'))


cnn_class.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""**CNN to the images and train**"""

#Preveting overfitting
#Creating trainging set and test set

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1.0/255)

tr_set = train_datagen.flow_from_directory(
        trainPath,
        target_size=(64, 64),
        color_mode='grayscale',
        batch_size=8,
        class_mode='binary')

ts_set = test_datagen.flow_from_directory(
        testPath,
        target_size=(64, 64),
        color_mode='grayscale',
        batch_size=8,
        class_mode='binary')

cnn_class.fit(
        tr_set,
        workers=8,
        steps_per_epoch=5246,
        epochs=10,
        validation_data=ts_set,
        validation_steps=624)

"""**Printing layers**"""

print(cnn_class.summary())

from keras.models import Model

def combine_gen(*gens):
    while True:
        for g in gens:
            yield next(g)

intermediate_model = Model(inputs=cnn_class.layers[0].input, 
                              outputs=cnn_class.layers[5,].output )
out = intermediate_model.predict(combine_gen(tr_set, ts_set))



from google.colab import files

file = open('data.csv', 'w+')
a=0

for line in out:
  for data in line:
    file.write(",{:.2f}".format(data))
    
  file.write(",{:.2f}".format(a)+"\n")
  
files.download('data.csv')